import numpy as np
from scipy.integrate import odeint
from scipy.optimize import minimize
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats
#initial_params1 = 0.9 #np.random.random_sample()
#initial_params2 = 0.9# np.random.random_sample()
#initial_params3= 0.9
#initial_params=[initial_params1,initial_params2,initial_params3]
#print('initial params')
#print(initial_params)


def model(y, t, params):
    # y: state variables
    # t: time
    # params: parameter vector

    # Unpack the state variables
    ENS, HNS, MNS = y

    # Unpack the parameter vector

    a2, c2,q1 = params
    #a3, c3, q2 = params

    # a1, a2, a3, b1, b2, b3, c1, c2, c3, d1, d2, d3,e1 = params

    # Calculate the rates of change
    # models 6 state
    '''x = (-a1 - a2 - a3) * ENS + b1 * ES
    y = (-b1 - b2 - b3) * ES + a1 * ENS
    z= (-c1 - c2 - c3) * HNS + d1 * HS + b3 * ES + a2 * ENS
    v= (-d1 - d2 - d3) * HS + c1 * HNS + a3 * ENS + b2 * ES
    w= -e1 * MNS + c2 * HNS + d3 * HS + i * MS
    q= -i * MS + d2 * HS + c3 * HNS + e1 * MNS

    x = (-q1 - a2) * ENS
    y = (-b2 - q2) * ES
    z = (-c2 - i) * HNS + a2 * ENS
    v = (-d2) * HS + b2 * ES
    w = +c2 * HNS + q1 * ENS
    q = + d2 * HS + q2 * ES + i * HNS'''

    # model 3 state

    #EMT
    x = (-q1 - a2) * ENS
    z = (-c2) * HNS + a2 * ENS
    w = +c2 * HNS + q1 * ENS

    # model e->h->m
    '''x = (- a2) * ENS
    z = (-c2) * HNS + a2 * ENS
    w = +c2 * HNS'''


    # MET
    '''x = (+a3) * HNS + (q2) * MNS
    z = (+c3) * MNS - a3 * HNS
    w = (-q2 - c3) * MNS'''

    return (x, z, w)


# Define the objective function to minimize
def objective(params):
    # params: parameter vector

    # Solve the differential equations
    solution = odeint(model, initial_conditions, time_points, args=(params,))

    # Calculate the residuals
    residuals = np.sum((solution - observed_data) ** 2)

    return residuals


time_points = np.array([1, 3, 6, 8])  # Example time points
#time_points = np.array([8, 10, 13, 20,23,27])

# observed_data = np.array([[64.5,6.05,3.6,5.6],  # Example observed data for variable x
# [0.025,0.013,0.0013,0.00128],[24.64,36.5,34.5,36.8],[0.0198,0.05,0.03,0.0128],[1.29,44.4,55,47.5],[0.0267,0.056,0.0838,0.1]])  # Example observed data for variable y
# observed_data = np.array([[64.5, 0.025, 24.64, 0.0198, 1.29, 0.0267], [6.05, 0.013, 36.5, 0.05, 44.4, 0.056],
# [3.6, 0.0013, 34.5, 0.03, 55, 0.0838], [5.6, 0.00128, 36.8, 0.0128, 47.5, 0.1]])

#*********** OBSERVED DATA*****************

#EMT NOT STEM
#observed_data = np.array([[64.5, 24.64, 1.29], [6.05, 36.5, 44.4], [3.6, 34.5, 55], [5.6, 36.8, 47.5]])

#EMT STEM
observed_data= np.array([[39.65,30.6,4.12],[8.75,34.5,37.5],[1,25,64.5],[0.95,9.5,76]])

#MET NOT STEM
#observed_data= np.array([[5.6, 36.8, 47.5],[6.5,36.5,36.8],[9.75,42,34],[22.5,42,17.25],[57.5,33,2.15],[60.2,13.1,1.95]])

# observed_data = np.array([[0.025, 0.0198, 0.0267], [0.013,0.05,0.056],
# [0.0013,0.03,0.0838], [0.00128,0.0128,0.1]])
# observed_data = np.array([[64.5, 0.025, 24.64, 0.0198, 1.29, 0.0267], [64.5, 0.025, 24.64, 0.0198, 1.29, 0.0267], [64.5, 0.025, 24.64, 0.0198, 1.29, 0.0267], [64.5, 0.025, 24.64, 0.0198, 1.29, 0.0267], [64.5, 0.025, 24.64, 0.0198, 1.29, 0.0267], [64.5, 0.025, 24.64, 0.0198, 1.29, 0.0267], [64.5, 0.025, 24.64, 0.0198, 1.29, 0.0267], [64.5, 0.025, 24.64, 0.0198, 1.29, 0.0267], [64.5, 0.025, 24.64, 0.0198, 1.29, 0.0267], [64.5, 0.025, 24.64, 0.0198, 1.29, 0.0267], [64.5, 0.025, 24.64, 0.0198, 1.29, 0.0267], [64.5, 0.025, 24.64, 0.0198, 1.29, 0.0267], [64.5, 0.025, 24.64, 0.0198, 1.29, 0.0267], [63.023989898989896, 0.024696969696969696, 24.93949494949495, 0.020562626262626265, 2.3786363636363657, 0.027439898989898993], [60.662373737373734, 0.024212121212121213, 25.41868686868687, 0.021782828282828286, 4.12045454545455, 0.028623737373737378], [58.30075757575757, 0.02372727272727273, 25.89787878787879, 0.023003030303030306, 5.862272727272728, 0.02980757575757576], [55.93914141414141, 0.02324242424242424, 26.377070707070708, 0.024223232323232327, 7.604090909090911, 0.030991414141414146], [53.57752525252525, 0.022757575757575758, 26.856262626262627, 0.025443434343434348, 9.345909090909096, 0.03217525252525253], [51.21590909090909, 0.022272727272727274, 27.335454545454546, 0.026663636363636365, 11.087727272727275, 0.03335909090909091], [48.854292929292924, 0.021787878787878787, 27.814646464646465, 0.027883838383838386, 12.829545454545457, 0.03454292929292929], [46.49267676767676, 0.021303030303030303, 28.293838383838384, 0.02910404040404041, 14.571363636363639, 0.03572676767676768], [44.1310606060606, 0.02081818181818182, 28.773030303030303, 0.030324242424242427, 16.313181818181818, 0.03691060606060606], [41.76944444444444, 0.020333333333333335, 29.252222222222223, 0.031544444444444444, 18.055000000000003, 0.038094444444444445], [39.40782828282828, 0.019848484848484848, 29.73141414141414, 0.03276464646464647, 19.796818181818185, 0.03927828282828283], [37.04621212121212, 0.019363636363636364, 30.21060606060606, 0.033984848484848486, 21.538636363636364, 0.04046212121212121], [34.68459595959595, 0.018878787878787877, 30.68979797979798, 0.03520505050505051, 23.280454545454546, 0.0416459595959596], [32.32297979797979, 0.018393939393939393, 31.1689898989899, 0.03642525252525253, 25.022272727272732, 0.04282979797979798], [29.96136363636363, 0.01790909090909091, 31.64818181818182, 0.03764545454545455, 26.764090909090914, 0.044013636363636366], [27.59974747474746, 0.017424242424242422, 32.12737373737374, 0.038865656565656576, 28.505909090909096, 0.04519747474747475], [25.238131313131312, 0.01693939393939394, 32.60656565656566, 0.040085858585858586, 30.24772727272727, 0.046381313131313134], [22.87651515151515, 0.016454545454545454, 33.085757575757576, 0.04130606060606061, 31.989545454545453, 0.04756515151515152], [20.51489898989898, 0.015969696969696967, 33.564949494949495, 0.042526262626262634, 33.73136363636364, 0.0487489898989899], [18.15328282828282, 0.015484848484848483, 34.044141414141414, 0.04374646464646465, 35.47318181818182, 0.04993282828282829], [15.791666666666657, 0.014999999999999998, 34.52333333333333, 0.04496666666666667, 37.215, 0.05111666666666667], [13.430050505050488, 0.014515151515151512, 35.00252525252525, 0.04618686868686869, 38.956818181818186, 0.052300505050505056], [11.068434343434326, 0.014030303030303027, 35.48171717171717, 0.04740707070707072, 40.698636363636375, 0.05348434343434344], [8.706818181818178, 0.013545454545454545, 35.96090909090909, 0.04862727272727273, 42.44045454545454, 0.054668181818181824], [6.345202020202009, 0.013060606060606059, 36.44010101010101, 0.04984747474747475, 44.18227272727273, 0.05585202020202021], [5.9922558922558915, 0.012724242424242423, 36.45286195286195, 0.04952861952861953, 44.64983164983165, 0.05665521885521886], [5.926262626262626, 0.012409090909090908, 36.398989898989896, 0.04898989898989899, 44.935353535353535, 0.05740404040404041], [5.86026936026936, 0.012093939393939391, 36.34511784511785, 0.04845117845117845, 45.22087542087542, 0.058152861952861956], [5.794276094276094, 0.011778787878787876, 36.29124579124579, 0.04791245791245791, 45.506397306397304, 0.05890168350168351], [5.728282828282828, 0.011463636363636363, 36.23737373737374, 0.047373737373737373, 45.79191919191919, 0.05965050505050505], [5.662289562289562, 0.011148484848484847, 36.18350168350168, 0.046835016835016834, 46.07744107744108, 0.060399326599326605], [5.596296296296296, 0.010833333333333332, 36.129629629629626, 0.046296296296296294, 46.36296296296296, 0.06114814814814815], [5.53030303030303, 0.010518181818181817, 36.07575757575758, 0.04575757575757576, 46.64848484848485, 0.0618969696969697], [5.464309764309764, 0.0102030303030303, 36.02188552188552, 0.04521885521885522, 46.934006734006736, 0.06264579124579125], [5.398316498316498, 0.009887878787878786, 35.96801346801347, 0.04468013468013468, 47.21952861952862, 0.0633946127946128], [5.332323232323232, 0.009572727272727273, 35.91414141414141, 0.04414141414141414, 47.505050505050505, 0.06414343434343435], [5.266329966329966, 0.009257575757575756, 35.86026936026936, 0.0436026936026936, 47.79057239057239, 0.06489225589225589], [5.2003367003367, 0.008942424242424241, 35.80639730639731, 0.04306397306397306, 48.076094276094274, 0.06564107744107744], [5.1343434343434335, 0.008627272727272725, 35.75252525252525, 0.04252525252525252, 48.36161616161616, 0.066389898989899], [5.068350168350168, 0.008312121212121212, 35.6986531986532, 0.04198653198653199, 48.64713804713805, 0.06713872053872054], [5.002356902356903, 0.007996969696969697, 35.64478114478114, 0.04144781144781145, 48.93265993265993, 0.0678875420875421], [4.936363636363636, 0.00768181818181818, 35.59090909090909, 0.04090909090909091, 49.21818181818182, 0.06863636363636363], [4.87037037037037, 0.007366666666666666, 35.53703703703704, 0.04037037037037037, 49.50370370370371, 0.06938518518518519], [4.804377104377104, 0.007051515151515149, 35.48316498316498, 0.03983164983164983, 49.789225589225595, 0.07013400673400674], [4.738383838383838, 0.006736363636363636, 35.42929292929293, 0.03929292929292929, 50.074747474747475, 0.07088282828282828], [4.672390572390572, 0.006421212121212122, 35.37542087542087, 0.038754208754208756, 50.360269360269356, 0.07163164983164982], [4.606397306397306, 0.0061060606060606044, 35.321548821548824, 0.038215488215488216, 50.645791245791244, 0.07238047138047138], [4.540404040404041, 0.005790909090909091, 35.26767676767677, 0.037676767676767677, 50.93131313131313, 0.07312929292929293], [4.474410774410774, 0.005475757575757574, 35.21380471380471, 0.03713804713804714, 51.21683501683502, 0.07387811447811449], [4.408417508417508, 0.00516060606060606, 35.15993265993266, 0.0365993265993266, 51.5023569023569, 0.07462693602693603], [4.342424242424242, 0.004845454545454543, 35.10606060606061, 0.03606060606060606, 51.78787878787879, 0.07537575757575758], [4.2764309764309765, 0.004530303030303029, 35.052188552188554, 0.03552188552188552, 52.07340067340068, 0.07612457912457912], [4.21043771043771, 0.0042151515151515155, 34.9983164983165, 0.034983164983164984, 52.35892255892256, 0.07687340067340068], [4.144444444444444, 0.003899999999999999, 34.94444444444444, 0.034444444444444444, 52.644444444444446, 0.07762222222222223], [4.0784511784511785, 0.003584848484848484, 34.89057239057239, 0.033905723905723904, 52.929966329966334, 0.07837104377104377], [4.012457912457911, 0.0032696969696969676, 34.83670033670034, 0.033367003367003364, 53.21548821548822, 0.07911986531986533], [3.9464646464646465, 0.0029545454545454545, 34.782828282828284, 0.032828282828282825, 53.5010101010101, 0.07986868686868687], [3.8804713804713797, 0.002639393939393936, 34.72895622895623, 0.032289562289562285, 53.78653198653199, 0.08061750841750842], [3.8144781144781144, 0.002324242424242423, 34.67508417508417, 0.031750841750841745, 54.07205387205387, 0.08136632996632998], [3.7484848484848485, 0.00200909090909091, 34.621212121212125, 0.031212121212121212, 54.35757575757576, 0.08211515151515152], [3.6824915824915823, 0.0016939393939393917, 34.56734006734007, 0.03067340067340067, 54.64309764309765, 0.08286397306397307], [3.6164983164983164, 0.0013787878787878786, 34.513468013468014, 0.030134680134680132, 54.92861952861953, 0.08361279461279461], [3.6606060606060615, 0.0012993939393939394, 34.56969696969697, 0.02947878787878787, 54.772727272727266, 0.0842909090909091], [3.741414141414142, 0.0012985858585858585, 34.66262626262626, 0.02878383838383838, 54.46969696969697, 0.08494545454545455], [3.8222222222222224, 0.0012977777777777777, 34.75555555555555, 0.028088888888888885, 54.166666666666664, 0.0856], [3.9030303030303037, 0.0012969696969696968, 34.84848484848485, 0.027393939393939387, 53.86363636363636, 0.08625454545454546], [3.983838383838384, 0.0012961616161616162, 34.94141414141414, 0.026698989898989896, 53.56060606060606, 0.08690909090909091], [4.064646464646465, 0.0012953535353535353, 35.034343434343434, 0.026004040404040397, 53.25757575757576, 0.08756363636363637], [4.1454545454545455, 0.0012945454545454545, 35.127272727272725, 0.025309090909090906, 52.95454545454545, 0.08821818181818182], [4.226262626262627, 0.0012937373737373736, 35.220202020202024, 0.024614141414141404, 52.65151515151515, 0.08887272727272728], [4.307070707070707, 0.001292929292929293, 35.313131313131315, 0.023919191919191913, 52.348484848484844, 0.08952727272727273], [4.387878787878788, 0.0012921212121212121, 35.406060606060606, 0.02322424242424242, 52.04545454545455, 0.09018181818181818], [4.468686868686869, 0.0012913131313131313, 35.4989898989899, 0.022529292929292923, 51.74242424242424, 0.09083636363636365], [4.5494949494949495, 0.0012905050505050506, 35.59191919191919, 0.02183434343434343, 51.43939393939394, 0.0914909090909091], [4.630303030303031, 0.0012896969696969698, 35.68484848484849, 0.02113939393939393, 51.13636363636363, 0.09214545454545456], [4.711111111111111, 0.001288888888888889, 35.77777777777778, 0.02044444444444444, 50.83333333333333, 0.09280000000000001], [4.791919191919193, 0.001288080808080808, 35.87070707070707, 0.01974949494949494, 50.530303030303024, 0.09345454545454547], [4.872727272727273, 0.0012872727272727274, 35.96363636363636, 0.01905454545454545, 50.22727272727273, 0.09410909090909092], [4.9535353535353535, 0.0012864646464646465, 36.05656565656565, 0.018359595959595958, 49.92424242424242, 0.09476363636363637], [5.034343434343435, 0.0012856565656565657, 36.14949494949495, 0.017664646464646456, 49.62121212121212, 0.09541818181818183], [5.115151515151515, 0.0012848484848484848, 36.24242424242424, 0.016969696969696964, 49.31818181818181, 0.09607272727272728], [5.1959595959595966, 0.0012840404040404042, 36.33535353535353, 0.016274747474747466, 49.015151515151516, 0.09672727272727275], [5.276767676767677, 0.0012832323232323233, 36.428282828282825, 0.015579797979797973, 48.71212121212121, 0.0973818181818182], [5.357575757575757, 0.0012824242424242425, 36.521212121212116, 0.014884848484848482, 48.40909090909091, 0.09803636363636364], [5.438383838383839, 0.0012816161616161616, 36.614141414141415, 0.014189898989898982, 48.1060606060606, 0.0986909090909091], [5.519191919191919, 0.001280808080808081, 36.707070707070706, 0.01349494949494949, 47.803030303030305, 0.09934545454545456]])
# df = pd.read_csv("C:/Users/SAMSM-X900NZAEEUE/Desktop/pop_array_3.csv",index_col=0) #synthetic data
# Load your pre-existing time course data
# time_points = df.index.values
# observed_data= df.values
# Set initial conditions and initial parameter values
# initial_conditions = [64, 1, 30, 1, 4, 0]  # Example initial conditions
# initial_conditions=[0.025, 0.0198, 0.0267]


#************* SET INITIAL CONDITIONS***************
# EMT NON STEM
'''time_points = np.array([1, 3, 6, 8])
initial_conditions = [65, 30, 5]
observed_data = np.array([[64.5, 24.64, 1.29], [6.05, 36.5, 44.4], [3.6, 34.5, 55], [5.6, 36.8, 47.5]])'''

# EMT STEM
time_points = np.array([1, 3, 6, 8])
observed_data = np.array([[39.65, 30.6, 4.12], [8.75, 34.5, 37.5], [1, 25, 64.5], [0.95, 9.5, 76]])
initial_conditions = [50, 40, 10]
#initial_conditions = [39.65, 30.6, 4.12]

# MET NON STEM
'''time_points = np.array([8, 10, 13, 20, 23, 27])
#initial_conditions = [5.6, 36.8, 47.5]
initial_conditions = [10, 40, 50]
observed_data= np.array([[5.6, 36.8, 47.5],[6.5,36.5,36.8],[9.75,42,34],[22.5,42,17.25],[57.5,33,2.15],[60.2,13.1,1.95]])'''


# initial_params =  2 * np.random.random_sample((2,))
#print('initial params')
#print(initial_params)  # Example initial parameter values
bounds = ((0, 3),) * 3

# Run the optimization
a2_arr=[]
c2_arr=[]
q1_arr=[]

for i in range(500):
    initial_params1 = np.random.random_sample()
    initial_params2 = np.random.random_sample()
    initial_params3 = np.random.random_sample()
    initial_params = [initial_params1, initial_params2,initial_params3]
    result = minimize(objective, initial_params, method='Powell', bounds=bounds)
    #result = minimize(lambda x: objective(initial_params), initial_params, method='Powell', bounds=bounds)
    #print(result.success)
    #print(result.message)

    # Get the optimized parameters
    # print('optimized params')
    optimized_params = result.x

    # Solve the differential equations with the optimized parameters
    # solution = odeint(model, initial_conditions, time_points, args=(optimized_params,))

    # Print the optimized parameters and the solution
    print("Optimized parameters:")
    print(optimized_params)
    a2_arr.append(optimized_params[0])
    c2_arr.append(optimized_params[1])
    q1_arr.append(optimized_params[2])

mean_a2=np.mean(a2_arr)
mean_c2=np.mean(c2_arr)
mean_q1=np.mean(q1_arr)
std_a2 = np.std(a2_arr)
std_c2 = np.std(c2_arr)
std_q1 = np.std(q1_arr)
#mean_q1=np.mean(q2_arr)
'''m_a2 = stats.mode(a2_arr)
m_c2= stats.mode(c2_arr)
m_q1= stats.mode(q1_arr)
print(m_a2)
print(m_c2)
print(m_q1)'''



print('a2=',a2_arr)
print('c2=',c2_arr)
print('q1=',q1_arr)
print('mean a2=',mean_a2)
print('mean c2=',mean_c2)
print('mean q1=',mean_q1)
print('dev std a2=',std_a2)
print('dev std c2=',std_c2)
print('dev std q1=',std_q1)

#print('q1=',q1_arr)
#sns.histplot(c2_arr)

'''sns.histplot(c2_arr,bins=[0,0.0000000000001,0.0000000000005,0.000000000001,0.000000000005,0.00000000001,0.00000000005,0.0000000001,0.0000000005,0.000000001,0.000000005,0.00000001,0.00000005,0.0000001,0.0000005,0.000001,0.000005,0.00001,0.00005,0.0001,0.0005,0.001,0.005,0.01])
#plt.hist(c2_arr, bins=10)
plt.xlabel('c2', fontsize=15)
plt.ylabel('Count', fontsize=15)
#sns.kdeplot(a2_arr)
plt.xscale('log')
plt.show()

plt.hist(c2_arr, bins='auto')
plt.xlabel('c2', fontsize=15)
plt.ylabel('Count', fontsize=15)
#sns.kdeplot(c2_arr)
plt.show()


plt.hist(q1_arr, bins='auto')
plt.xlabel('q1', fontsize=15)
plt.ylabel('Count', fontsize=15)
#sns.kdeplot(q1_arr)
plt.show()
plt.close()
# optimized_params = [round(value, 8) for value in optimized_params]
# print(optimized_params)
# print("Solution:")
# print(solution)
#v.append(result.fun)
# Specify the output file path
# output_file = 'C:/Users/SAMSM-X900NZAEEUE/Desktop/A549_model/a1_residuals.csv'

# Append the array to the CSV file
# with open(output_file, 'a', newline='') as csvfile:
# writer = csv.writer(csvfile)
# writer.writerow(result.fun)

# print("Array appended to", output_file)'''

new_array = np.round(q1, decimals=3)


